#!/usr/bin/env python3

'''togglemount

mount but a few differences:
    - if already mounted, unmounts and deletes mountmount
    - mountmount must not exist beforehand
    - if no arguments are passed, takes them from stdin
    - if a single script argument is passed, takes them from the script
'''


from sys import argv, exit, stdin, stderr
from subprocess import run
from pathlib import Path


class MountInfo:
    def __init__(self, data):
        self.data = tuple(
            e.encode('latin-1', 'backslashreplace').decode('unicode-escape')
            for e in data
        )

    @property
    def mountpoint(self):
        return Path(self.data[4]).resolve()

    def __eq__(self, other):
        if isinstance(other, (str, Path)):
            return self.mountpoint == Path(other).resolve()
        if isinstance(other, MountInfo):
            return len(self.data) == len(other.data) and all(
                a == b
                for a, b in zip(self.data, other.data)
            )
        return False


def get_mountinfo():
    with open('/proc/self/mountinfo') as file:
        for line in file:
            yield MountInfo(line.split())


def get_args(file):
    from shlex import split
    with file:
        for line in file:
            i = line.find('#')
            if i != -1:
                line = line[:i]
            yield from split(line)


if len(argv) == 1:
    try:
        args = list(get_args(stdin))
    except KeyboardInterrupt:
        exit(1)
elif len(argv) == 2 and Path(argv[1]).is_file():
    args = list(get_args(open(argv[1])))
else:
    args = argv[1:]


mountpoint = Path(args[-1]).resolve()
if mountpoint not in get_mountinfo():
    try:
        mountpoint.mkdir()
    except (FileExistsError, FileNotFoundError) as e:
        if not (mountpoint.is_dir() and len(list(mountpoint.iterdir())) == 0):
            print(f'{e.strerror}: {e.filename}', file=stderr)
            exit(1)
    res = run([ 'mount' ] + args)
    if res.returncode:
        exit(res.returncode)
else:
    res = run([ 'umount', args[-1] ])
    if res.returncode:
        exit(res.returncode)
    try:
        mountpoint.rmdir()
    except OSError as e:
        if e.errno != 39:
            raise
        print(f'{e.strerror}: {e.filename}', file=stderr)
        exit(1)
